// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/grpc/echo.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockEchoServerClient is a mock of EchoServerClient interface
type MockEchoServerClient struct {
	ctrl     *gomock.Controller
	recorder *MockEchoServerClientMockRecorder
}

// MockEchoServerClientMockRecorder is the mock recorder for MockEchoServerClient
type MockEchoServerClientMockRecorder struct {
	mock *MockEchoServerClient
}

// NewMockEchoServerClient creates a new mock instance
func NewMockEchoServerClient(ctrl *gomock.Controller) *MockEchoServerClient {
	mock := &MockEchoServerClient{ctrl: ctrl}
	mock.recorder = &MockEchoServerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEchoServerClient) EXPECT() *MockEchoServerClientMockRecorder {
	return m.recorder
}

// Echo mocks base method
func (m *MockEchoServerClient) Echo(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Echo", varargs...)
	ret0, _ := ret[0].(*Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Echo indicates an expected call of Echo
func (mr *MockEchoServerClientMockRecorder) Echo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Echo", reflect.TypeOf((*MockEchoServerClient)(nil).Echo), varargs...)
}

// MockEchoServerServer is a mock of EchoServerServer interface
type MockEchoServerServer struct {
	ctrl     *gomock.Controller
	recorder *MockEchoServerServerMockRecorder
}

// MockEchoServerServerMockRecorder is the mock recorder for MockEchoServerServer
type MockEchoServerServerMockRecorder struct {
	mock *MockEchoServerServer
}

// NewMockEchoServerServer creates a new mock instance
func NewMockEchoServerServer(ctrl *gomock.Controller) *MockEchoServerServer {
	mock := &MockEchoServerServer{ctrl: ctrl}
	mock.recorder = &MockEchoServerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEchoServerServer) EXPECT() *MockEchoServerServerMockRecorder {
	return m.recorder
}

// Echo mocks base method
func (m *MockEchoServerServer) Echo(arg0 context.Context, arg1 *Message) (*Message, error) {
	ret := m.ctrl.Call(m, "Echo", arg0, arg1)
	ret0, _ := ret[0].(*Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Echo indicates an expected call of Echo
func (mr *MockEchoServerServerMockRecorder) Echo(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Echo", reflect.TypeOf((*MockEchoServerServer)(nil).Echo), arg0, arg1)
}
